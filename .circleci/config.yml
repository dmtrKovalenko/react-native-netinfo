version: 2.1

# -------------------------
#        DEFAULTS
# -------------------------

defaults: &defaults
  working_directory: ~/project
  environment:
    - GIT_COMMIT_DESC: git log --format=oneline -n 1 $CIRCLE_SHA1

# JAVASCRIPT
js_defaults: &js_defaults
  <<: *defaults
  docker:
    - image: circleci/node:8
  environment:
    - PATH: '/opt/yarn/yarn-v1.5.1/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

# ANDROID
android_defaults: &android_defaults
  <<: *defaults
  docker:
    - image: reactnativecommunity/react-native-android
  resource_class: 'medium'
  working_directory: ~/project
  environment:
    - _JAVA_OPTIONS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Xmx2048m'
    - GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-XX:+HeapDumpOnOutOfMemoryError -Xmx2048m"'
    - BUILD_THREADS: 2

# IOS
macos_defaults: &macos_defaults
  <<: *defaults
  resource_class: 'medium'
  macos:
    xcode: '10.1.0'

# -------------------------
#        ORBS
# -------------------------

orbs:
  react-native-community-test:
    jobs:
      checkout_code:
        executor: linux_js
        steps:
          - checkout
          - persist_to_workspace:
              root: .
              paths: .

      analyse:
        executor: linux_js
        steps:
          - attach_workspace:
              at: ~/project
          - setup_cache_check_files
          - yarn_install
          - validate_eslint
          - validate_flow
          - validate_typescript
          - test_jest
          - build_js_bundle_android
          - build_js_bundle_ios
          - persist_to_workspace:
              root: ~/project
              paths:
                - .tmp

      build_android_debug:
        executor: linux_android
        steps:
          - attach_workspace:
              at: ~/project
          - setup_cache_check_files
          - yarn_install
          - build_android_apk:
              app_build_type: Debug
              test_build_type: debug

      build_android_release:
        executor: linux_android
        steps:
          - attach_workspace:
              at: ~/project
          - setup_cache_check_files
          - yarn_install
          - build_android_apk:
              app_build_type: Release
              test_build_type: release
      
      test_android_e2e:
        executor: macos
        steps:
          - attach_workspace:
              at: ~/project
          - setup_cache_check_files
          - setup_android_sdk
          - yarn_install
          - setup_android_emulator
          # TODO: Make this a command
          - run:
              name: Run Tests (API 28)
              command: yarn run test:detox:android:test:release
          - store_artifacts:
              path: ~/detox-artifacts
      
      test_ios_e2e:
        executor: macos
        steps:
          - attach_workspace:
              at: ~/project
          - setup_cache_check_files
          - setup_ios_environment
          - setup_ios_simulator
          - yarn_install
          # TODO: Make this a command
          - restore_cache:
              key: v1-ios-build-cache-{{ arch }}-{{ checksum "~/.tmp/checksumfiles/package.json" }}
          - run:
              name: Build iOS Testing App
              command: yarn run test:detox:ios:build:release
          - save_cache:
              paths:
                - ~/project/example/ios/build/Build
              key: v1-ios-build-cache-{{ arch }}-{{ checksum "~/.tmp/checksumfiles/package.json" }}
              when: always

          - run: mkdir ~/detox-artifacts
          # TODO: Make this a command
          - run:
              name: Run Detox Tests
              command: yarn run test:detox:ios:test:release
          - store_artifacts:
              path: ~/detox-artifacts

      publish:
        <<: *js_defaults
        steps:
          - attach_workspace:
              at: ~/project
          - yarn_install
          - publish_semantic_release

    commands:
      setup_cache_check_files:
        steps:
          - run:
              name: Make Cache Checksum Files
              command: |
                mkdir -p ~/.tmp
                mkdir -p ~/.tmp/checksumfiles
                find . -type f -name 'build.gradle' -not -path "*node_modules*" -exec cat {} + >> ~/.tmp/checksumfiles/build.gradle
                find . -type f -name 'settings.gradle' -not -path "*node_modules*" -exec cat {} + >> ~/.tmp/checksumfiles/settings.gradle
                find . -type f -name 'package.json' -not -path "*node_modules*" -exec cat {} + >> ~/.tmp/checksumfiles/package.json
      setup_android_sdk:
        steps:
          - run:
              name: Configure Environment Variables
              command: |
                echo 'export PATH="$PATH:/usr/local/opt/node@8/bin:~/.yarn/bin:~/project/node_modules/.bin:~/project/example/node_modules/.bin"' >> $BASH_ENV
                echo 'export ANDROID_HOME="/usr/local/share/android-sdk"' >> $BASH_ENV
                echo 'export ANDROID_SDK_ROOT="/usr/local/share/android-sdk"' >> $BASH_ENV
                echo 'export PATH="$ANDROID_SDK_ROOT/emulator:$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:$PATH"' >> $BASH_ENV
                echo 'export QEMU_AUDIO_DRV=none' >> $BASH_ENV
                echo 'export JAVA_HOME=/Library/Java/Home' >> $BASH_ENV
                source $BASH_ENV
          - run:
              name: Install Android SDK Tools
              command: |
                HOMEBREW_NO_AUTO_UPDATE=1 brew tap homebrew/cask >/dev/null
                HOMEBREW_NO_AUTO_UPDATE=1 brew cask install android-sdk >/dev/null
                HOMEBREW_NO_AUTO_UPDATE=1 brew cask install intel-haxm >/dev/null
                HOMEBREW_NO_AUTO_UPDATE=1 brew install node@8 >/dev/null >/dev/null
      setup_android_emulator:
        steps:
          - run:
              name: Install Android Emulator
              shell: /bin/bash -e
              command: |
                yes | sdkmanager "platform-tools"  "tools" >/dev/null
                yes | sdkmanager "platforms;android-28" "system-images;android-27;google_apis;x86" "system-images;android-28;google_apis;x86" >/dev/null
                yes | sdkmanager "emulator" --channel=3 >/dev/null
                yes | sdkmanager "build-tools;28.0.3" >/dev/null
                yes | sdkmanager --licenses >/dev/null
                yes | sdkmanager --list
          # to force ssh key generation for emulators
          - run:
              name: ADB Start Stop
              command: |
                adb start-server
                adb devices
                adb kill-server
                ls -la ~/.android
          - run:
              name: Create Android Emulator (API 28)
              command: avdmanager create avd --force -n TestingAVD -k "system-images;android-28;google_apis;x86" -g google_apis -d "Nexus 4"
          - run:
              name: Start Android Emulator (API 28) in background
              command: |
                /usr/local/share/android-sdk/emulator/emulator @TestingAVD -version
                /usr/local/share/android-sdk/emulator/emulator @TestingAVD -skin 470x860 -cores 1 -gpu auto -accel on -memory 1024 -no-audio -no-snapshot -no-boot-anim -no-window -logcat *:W | grep -i 'ReactNative\|com.reactnativecommunity\|RNCNetInfo'
              background: true
          - run:
              name: Wait for AVD to be ready (API 28)
              no_output_timeout: "5m"
              command: sh ./.circleci/scripts/wait-for-avd.sh
      setup_ios_environment:
        steps:
          - run:
              name: Configure Environment Variables
              command: |
                echo 'export PATH="$PATH:/usr/local/opt/node@8/bin:~/.yarn/bin:~/project/node_modules/.bin:~/project/example/node_modules/.bin"' >> $BASH_ENV
                source $BASH_ENV
          - restore_cache:
              key: v1-brew-cache-{{ arch }}
          - run:
              name: Configure Detox Environment
              command: |
                HOMEBREW_NO_AUTO_UPDATE=1 brew install node@8 >/dev/null
                HOMEBREW_NO_AUTO_UPDATE=1 brew tap wix/brew >/dev/null
                HOMEBREW_NO_AUTO_UPDATE=1 brew install applesimutils >/dev/null
                touch .watchmanconfig
                node -v
          - save_cache:
              paths:
                - /usr/local/Homebrew
                - ~/Library/Caches/Homebrew
              key: v1-brew-cache-{{ arch }}
      setup_ios_simulator:
        steps:
          - run:
              name: Start iPhone X simulator (background)
              background: true
              command: xcrun simctl boot "iPhone X" || true
      yarn_install:
        steps:
          - restore_cache:
              key: v1-yarn-cache-{{ arch }}-{{ checksum "~/.tmp/checksumfiles/package.json" }}-{{ checksum "yarn.lock" }}
          - run:
              name: Yarn Install
              command: yarn install --non-interactive --cache-folder ~/.cache/yarn
          - save_cache:
              paths:
                - ~/.cache/yarn
                - ~/Library/Detox
              key: v1-yarn-cache-{{ arch }}-{{ checksum "~/.tmp/checksumfiles/package.json" }}-{{ checksum "yarn.lock" }}
      validate_flow:
        steps:
          - run:
              name: Validate Flow Declarations
              command: yarn run validate:flow
      validate_typescript:
        steps:
          - run:
              name: Validate TypeScript Declarations
              command: yarn run validate:typescript
      validate_eslint:
        steps:
          - run:
              name: Lint JS Code (ESLint)
              command: yarn run validate:eslint
      test_jest:
        steps:
          - run:
              name: Run Jest Tests
              command: yarn run test:jest
      build_js_bundle_android:
        steps:
          - run:
              name: Build Android JavaScript Bundle
              command: yarn run test:detox:android:bundle:release
      build_js_bundle_ios:
        steps:
          - run:
              name: Build iOS JavaScript Bundle
              command: yarn run test:detox:ios:bundle:release
      build_android_apk:
        parameters:
          project_path:
            type: string
            default: "example/android"
          app_build_type:
            type: enum
            enum: ["Debug", "Release"]
            default: "Debug"
          test_build_type:
            type: enum
            enum: ["debug", "release"]
            default: "debug"
        steps:
          - restore_cache:
              key: v1-gradle-wrapper-{{ checksum "example/android/gradle/wrapper/gradle-wrapper.properties" }}
          - restore_cache:
              keys:
                - v1-gradle-home-cache-{{ checksum "~/.tmp/checksumfiles/build.gradle" }}-{{ checksum "~/.tmp/checksumfiles/settings.gradle" }}
                - v1-gradle-home-cache
          - restore_cache:
              name: Restoring Gradle Build caches
              keys:
                - v1-gradle-debug-build-cache-{{ .Revision }}
                - v1-gradle-debug-build-cache
          - run:
              name: Dispersing Gradle Build caches for restoring
              command: |
                [ -d ~/gradle-build-caches ] &&
                  [ -n "$(ls -A ~/gradle-build-caches)" ] &&
                  rm -rf ~/.gradle/caches/build-cache-* &&
                  mkdir -p ~/.gradle/caches/ &&
                  mv ~/gradle-build-caches/* ~/.gradle/caches/ || true
          # download and cache dependencies and Gradle
          - run:
              name: Downloading Gradle Dependencies
              command: "cd <<parameters.project_path>> && ./gradlew --max-workers 2 downloadDependencies"
          - save_cache:
              name: Saving Gradle wrapper cache
              paths:
                - ~/.gradle/wrapper/
              key: v1-gradle-wrapper-{{ checksum "example/android/gradle/wrapper/gradle-wrapper.properties" }}
          - save_cache:
              name: Saving Gradle home cache
              paths:
                - ~/.gradle/caches/
              key: v1-gradle-home-cache-{{ checksum "~/.tmp/checksumfiles/build.gradle" }}-{{ checksum "~/.tmp/checksumfiles/settings.gradle" }}
          - run:
              name: Build Android Debug APK
              command: "cd <<parameters.project_path>> && chmod +x gradlew && ./gradlew --build-cache --max-workers 2 --continue assemble<<parameters.app_build_type>> assembleAndroidTest -DtestBuildType=<<parameters.test_build_type>> --stacktrace"
          - run:
              name: Collecting Gradle Build caches for saving
              command: |
                mkdir -p ~/gradle-build-caches
                [ -d ~/.gradle/caches ] &&
                  [ -n "$(ls -Ad ~/.gradle/caches/build-cache-* 2>/dev/null)" ] &&
                  rm -rf ~/gradle-build-caches/* &&
                  mv ~/.gradle/caches/build-cache-* ~/gradle-build-caches || true
              when: always
          - save_cache:
              name: Saving Gradle Build caches
              paths:
                - ~/gradle-build-caches
              key: v1-gradle-debug-build-cache-{{ .Revision }}
              when: always
          - persist_to_workspace:
              root: ~/project
              paths:
                - <<parameters.project_path>>/app/build/outputs/apk
      publish_semantic_release:
        steps:
          - run:
              name: Publish to NPM
              command: yarn ci:publish
    
    executors:
      linux_js:
        <<: *defaults
        docker:
          - image: circleci/node:8
        environment:
          - PATH: '/opt/yarn/yarn-v1.5.1/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
      linux_android:
        <<: *defaults
        docker:
          - image: reactnativecommunity/react-native-android
        resource_class: 'medium'
        working_directory: ~/project
        environment:
          - _JAVA_OPTIONS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Xmx2048m'
          - GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-XX:+HeapDumpOnOutOfMemoryError -Xmx2048m"'
          - BUILD_THREADS: 2
      macos:
        <<: *defaults
        resource_class: 'medium'
        macos:
          xcode: '10.1.0'

# -------------------------
#        WORKFLOWS
# -------------------------

workflows:
  test:
    jobs:
      - react-native-community-test/checkout_code

      - react-native-community-test/analyse:
          requires:
            - react-native-community-test/checkout_code

      - react-native-community-test/build_android_debug:
          requires:
            - react-native-community-test/analyse

      - react-native-community-test/build_android_release:
          requires:
            - react-native-community-test/analyse

      - react-native-community-test/test_android_e2e:
          requires:
            - react-native-community-test/build_android_release

      - react-native-community-test/test_ios_e2e:
          requires:
            - react-native-community-test/analyse
      
      - react-native-community-test/publish:
          requires:
            - react-native-community-test/analyse
            - react-native-community-test/test_android_e2e
            - react-native-community-test/test_ios_e2e
          filters:
            branches:
              only: master
